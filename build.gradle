plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

description = "Jefferson Lab logbook API"
group 'org.jlab'
version = '5.0.0'

ext {
    releaseDate = 'April 05 2020'
}

tasks.withType(JavaCompile) {
    options.release = 8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    integration {
        java.srcDir "${projectDir}/src/integration/java"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13'
}

processResources {
    filesMatching('release.properties') {
        filter {
            String line -> line.replaceAll("@VERSION@", version)
        }
        filter {
            String line -> line.replaceAll("@RELEASE_DATE@", releaseDate)
        }
    }
}

javadoc {
    options.overview = "src/main/java/overview.html"
    options.source = 8
    options.with {
        links 'https://devdocs.io/openjdk~8/'
    }
    failOnError = false // Inside acc network devdocs.io blocked
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        showStandardStreams = true
    }
}

signing {
    sign publishing.publications

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
}

publishing {
    repositories {
        maven {
            name "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("ossrh.user") ?: System.getenv("OSSRH_USER")
                password = project.findProperty("ossrh.token") ?: System.getenv("OSSRH_TOKEN")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/JeffersonLab/jlog")
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
        publications {
            maven(MavenPublication) {
                from(components.java)
                pom {
                    name = project.name
                    description = project.description
                    url = "https://github.com/JeffersonLab/jlog"
                    licenses {
                        license {
                            name = "The MIT License"
                            url = "https://github.com/JeffersonLab/jlog/blob/master/LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "slominskir"
                            name = "Ryan Slominski"
                            email = "ryans@jlab.org"
                        }
                        developer {
                            id = "dub357"
                            name = "Bobby Lawrence"
                            email = "robertl@jlab.org"
                        }
                    }
                    scm {
                        url = "https://github.com/JeffersonLab/jlog.git"
                    }
                }
            }
        }
        artifacts {
            archives javadocJar, sourcesJar
        }
    }
}

task tlog(type: JavaExec, dependsOn: build) {
    classpath = files('src/integration/resources')
    classpath += sourceSets.integration.runtimeClasspath
    mainClass.set('org.jlab.jlog.example.TLog')
    systemProperties System.getProperties() // forward all; example: setenv JAVA_OPTS -Djavax.net.debug=ssl:handshake
    //systemProperties = ['javax.net.debug': 'ssl:handshake']
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}